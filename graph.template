// FILE: graph.template (part of the namespace main_savitch_15)
// TEMPLATE CLASS IMPLEMENTED: graph<Item> (See graph.h for documentation.)
// This file is included in the header file and not compiled separately.
// INVARIANT for the graph class:
//   1. The number of vertices in the graph is stored in the member variable
//      many_vertices.
//   1. These vertices are numbered from 0 to many_vertices-1.
//   2. edges is the adjacency matrix for the graph (with true in edges[i][j]
//      to indicate an edge from vertex i to vertex j).
//   3. For each i < many_vertices, labels[i] is the label of vertex i.

//graph.template

#include <cassert>
#include <cstdlib>
#include <set>

namespace APARTMENT 
{
    template <class Item>
    void graph<Item>::add_vertex(const Item& label) {
        // Library facilities used: cassert, cstlib, set
        assert(size() < MAXIMUM);
        labels[many_vertices] = label;
        many_vertices++;
    }
    
    template <class Item>
    void graph<Item>::add_edge(std::size_t source, std::size_t target) {
        // Library facilities used: cassert, cstlib
        assert(source < size() && target < size());
        edges[source].insert(target); // set will not add a duplicate
    }
    
    template <class Item>
    void graph<Item>::remove_edge(std::size_t source, std::size_t target) {
        // Library facilities used: cassert, cstlib
        assert(source < size() && target < size());
        edges[source].erase(target);
    }
    
    template <class Item>
    Item& graph<Item>::operator [ ] (std::size_t vertex) {
        // Library facilities used: cassert, cstlib
        assert(vertex < size());
        return labels[vertex];
    }
    
    template <class Item>
    bool graph<Item>::is_edge(std::size_t source, std::size_t target) const {
        // Library facilities used: cassert, cstlib
        assert(source < size() && target < size());
        if (edges[source].count(target) != 0)
            return true;
        else return false;
    }
    
    template <class Item>
    std::set<std::size_t> graph<Item>::neighbors(std::size_t vertex) const {
        // Library facilities used: cassert, cstlib, set
        assert(vertex < size());
        std::set<size_t> neighbors;
        neighbors = edges[vertex];
        return neighbors;
    }
    
    template <class Item>
    Item graph<Item>::operator[ ] (std::size_t vertex) const {
        // Library facilities used: cassert, cstlib
        assert(vertex < size());
        Item label = labels[vertex];
        return label;
    }
}
